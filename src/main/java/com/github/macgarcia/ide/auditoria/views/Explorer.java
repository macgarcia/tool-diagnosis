package com.github.macgarcia.ide.auditoria.views;

import com.github.macgarcia.ide.auditoria.configuration.FactoryMessage;
import com.github.macgarcia.ide.auditoria.dao.MysqlDAO;
import com.github.macgarcia.ide.auditoria.dao.OracleDAO;
import com.github.macgarcia.ide.auditoria.dao.PostgresDAO;
import com.github.macgarcia.ide.auditoria.model.Sgdb;
import com.github.macgarcia.ide.auditoria.model.tablemodel.ExplorerInformationOfTableModel;
import com.github.macgarcia.ide.auditoria.querys.SqlMysql;
import com.github.macgarcia.ide.auditoria.querys.SqlOracle;
import com.github.macgarcia.ide.auditoria.querys.SqlPostgres;
import com.github.macgarcia.ide.auditoria.ruleConnection.ConnectionControl;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;

/**
 *
 * @author macgarcia
 */
public class Explorer extends javax.swing.JInternalFrame {
    
    private ExplorerInformationOfTableModel model;
    
    /**
     * Creates new form Explorer
     */
    public Explorer() {
        initComponents();
        screenConfiguration();
        createInformationTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jInformationOfTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);

        jInformationOfTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jInformationOfTable);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Information of tables");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(626, 626, 626))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(230, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable jInformationOfTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void screenConfiguration() {
        setTitle("Explorer");
        setResizable(false);
        this.addInternalFrameListener(new InternalFrameAdapter() {
            @Override
            public void internalFrameClosing(InternalFrameEvent e) {
                ConnectionControl.closeConnection();
            }
        });
    }
    
    private void createInformationTable() {
        try {
            Sgdb sgdb = ConnectionControl.getSgdb();
            switch(sgdb) {
                case MYSQL -> model = new ExplorerInformationOfTableModel(new MysqlDAO(SqlMysql.QUERY_NAME_AND_COLUMNS_ALL_TABLES));
                case ORACLE -> model = new ExplorerInformationOfTableModel(new OracleDAO(SqlOracle.QUERY_NAME_AND_COLUMNS_ALL_TABLES));
                case POSTGRES -> model = new ExplorerInformationOfTableModel(new PostgresDAO(SqlPostgres.QUERY_NAME_AND_COLUMNS_ALL_TABLES));
                default -> throw new RuntimeException("Database not implemented.");
            }
            jInformationOfTable.setModel(model);
            jInformationOfTable.getTableHeader().setReorderingAllowed(false);
        } catch (SQLException ex) {
            FactoryMessage.mensagemErro("Erro: " + ex.getMessage());
        }
    }

}
